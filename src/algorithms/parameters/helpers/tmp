
/**
 * Populate the data cells, see React-Table API
 * https://react-table.tanstack.com/docs/quick-start
 * @param {number} len size of the matrix
 * @param min
 * @param max
 * @param symmetric
 * @return array of object
 */
// Create random-ish edge matrix
// Was called with min=max=1 so we get a complete graph every time -
// visually confusing! Best arrange things so we have a small number of
// edges per node (2-3 seems reasonable), so we could use size + random
// number to determine if there is an edge and min&max (or 1) to get edge
// length if there is one. To make sure we have a connected graph we could
// force node n to be connected to node n+1
export const makeWeights = (len, min, max, symmetric, unweighted) => {
  const rows = [];

  // get pseudm-random len*len edge matrix
  // Try to get average degree around 3, edges being more likely between
  // nodes with similar numbers
  for (let i = 0; i < len; i += 1) {
    const row = [];
    let edgeCount = 0; // edge count for this node/row
    let tries = 0; // we try 5 times to get edgeCount > 0 then give up
    while (tries < 5 || edgeCount === 0 || len === 1) {
      tries++;
      for (let j = 0; j < len; j += 1) {
        let val = 0;
        if (j < i && symmetric) {
          val = rows[j][i];
        } else if (i == j) {
          // XXX using symmetric flag to determine if leading
          // diagonal is 1 or 0 is a bit sus but thats what earlier
          // code did...
          val = (symmetric? 0 : 1);
          // else determine if we want an edge between i and j
          // - if i&j differ more we reduce likelyhood
        } else if (Math.random() < 0.7**Math.abs(i-j)) {
          val = (unweighted? 1: getRandomInt(min, max));
        }
        if (val > 0) edgeCount++;
        row.push(val);
      }
    }
    rows.push(row);
  }
  let arr = [];
  for (let i = 0; i < len; i += 1) {
    const data = {};
    for (let j = 0; j < len; j += 1) {
      data[`col${j}`] = `${rows[i][j]}`;
    }
    arr.push(data);
  }
  if (len === 4 && symmetric !== true) { // XXX WTF?
    arr = [
      {
        col0: '1',
        col1: '0',
        col2: '0',
        col3: '1',
      },
      {
        col0: '1',
        col1: '1',
        col2: '0',
        col3: '1',
      },
      {
        col0: '1',
        col1: '1',
        col2: '1',
        col3: '0',
      },
      {
        col0: '0',
        col1: '0',
        col2: '1',
        col3: '1',
      },
    ];
  }
  return arr;
};

